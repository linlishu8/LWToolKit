import Foundation
import Security
public final class LWKeychain { public static let shared = LWKeychain(); private init(){} ; public func saveToken(_ token: LWTokenStore.Token) async { let d = try! JSONEncoder().encode(token); let q:[String:Any] = [kSecClass as String:kSecClassGenericPassword, kSecAttrService as String:"com.example.lw.tokens", kSecAttrAccount as String:"auth"]; SecItemDelete(q as CFDictionary); var add=q; add[kSecValueData as String]=d; SecItemAdd(add as CFDictionary, nil) } ; public func loadToken() async -> LWTokenStore.Token? { let q:[String:Any] = [kSecClass as String:kSecClassGenericPassword, kSecAttrService as String:"com.example.lw.tokens", kSecAttrAccount as String:"auth", kSecReturnData as String:true]; var out: CFTypeRef?; if SecItemCopyMatching(q as CFDictionary, &out)==errSecSuccess, let d=out as? Data { return try? JSONDecoder().decode(LWTokenStore.Token.self, from: d) } ; return nil } }
