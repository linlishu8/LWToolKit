import Foundation
public final class LWInMemoryCache { public static let shared = LWInMemoryCache(); private var store:[String:(Data,Date)] = [:]; private let lock = NSLock(); public func get(_ k:String)->Data?{ lock.lock(); defer{lock.unlock()}; if let e=store[k], e.1 > Date(){ return e.0 }; return nil } ; public func set(_ k:String, data:Data, ttl:TimeInterval){ lock.lock(); defer{lock.unlock()}; store[k]=(data, Date().addingTimeInterval(ttl)) } }
public struct LWCacheMiddleware: LWMiddleware { let ttl: TimeInterval; public init(ttl: TimeInterval){ self.ttl = ttl } ; public func prepare(_ r: URLRequest) -> URLRequest { r } ; public func willSend(_ request: URLRequest) {} ; public func didReceive(_ result: Result<(HTTPURLResponse, Data), LWNetworkError>, for request: URLRequest) {} }
