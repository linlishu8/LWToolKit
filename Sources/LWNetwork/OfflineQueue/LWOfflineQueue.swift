import Foundation
public struct LWOfflineTask: Codable { public enum Priority: String, Codable { case high, normal, low } ; public var id = UUID().uuidString; public var method:String; public var url:String; public var body:Data; public var priority:Priority; public var retries:Int = 0; public var nextAt: Date = Date()
  public init(method:String, url:String, body:Data, priority:Priority){ self.method=method; self.url=url; self.body=body; self.priority=priority } }
public final class LWOfflineQueue { public static let shared = LWOfflineQueue(); private let fileURL: URL = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!.appendingPathComponent("offline-queue.json"); private let lock = NSLock(); private var timer: Timer?
  public func enqueue(_ t: LWOfflineTask){ lock.lock(); defer{lock.unlock()}; var list = load(); list.append(t); save(list) }
  public func start(){ timer?.invalidate(); timer = Timer.scheduledTimer(withTimeInterval: 2.0, repeats: true){ [weak self] _ in self?.tick() } } ; public func stop(){ timer?.invalidate(); timer=nil } ; public func flush(){ tick(force: true) }
  private func tick(force: Bool = false){ lock.lock(); defer{lock.unlock()}; let list = load(); let now = Date(); var remain:[LWOfflineTask] = []; for item in list.sorted(by:{ $0.priority.order < $1.priority.order }) { var task = item; if force || task.nextAt <= now { guard let url=URL(string:task.url) else { continue }; var req=URLRequest(url:url); req.httpMethod=task.method; req.httpBody=task.body; let sem=DispatchSemaphore(value:0); URLSession.shared.dataTask(with:req){_,resp,_ in if let h=resp as? HTTPURLResponse, (200..<300).contains(h.statusCode) {} else { task.retries += 1; task.nextAt = now.addingTimeInterval(pow(2.0, Double(min(6, task.retries)))); remain.append(task) } ; sem.signal() }.resume(); sem.wait() } else { remain.append(task) } } ; save(remain) }
  private func load()->[LWOfflineTask]{ (try? JSONDecoder().decode([LWOfflineTask].self, from: (try? Data(contentsOf: fileURL)) ?? Data())) ?? [] } ; private func save(_ list:[LWOfflineTask]){ let d = try? JSONEncoder().encode(list); try? d?.write(to: fileURL) } }
private extension LWOfflineTask.Priority { var order:Int { switch self { case .high: return 0; case .normal: return 1; case .low: return 2 } } }
